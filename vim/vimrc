set nocompatible 
filetype off

" ---- Plugin --------------------------------------------------------
"
" init vundle
set rtp+=~/.vim/bundle/Vundle.vim
call vundle#begin()
Plugin 'VundleVim/Vundle.vim'

" --- coding
Plugin 'neoclide/coc.nvim'
Plugin 'junegunn/fzf.vim'
Plugin 'tpope/vim-fugitive'
Plugin 'tpope/vim-commentary'

" --- looks
Plugin 'morhetz/gruvbox'

" --- windows
Plugin 'vim-airline/vim-airline'
Plugin 'scrooloose/nerdtree'

" --- behaviour
Plugin 'qpkorr/vim-bufkill'

call vundle#end()
filetype plugin indent on

" ---- General Settings ---------------------------------------------

" Display indentation guides
set list listchars=tab:\│\ ,trail:·,extends:»,precedes:«,nbsp:x

" Tab length
set tabstop=4 softtabstop=0 expandtab shiftwidth=4 smarttab

" Color scheme
colorscheme gruvbox
set background=dark

" Display line number
set nu

" Highlight search matches
set hlsearch

set rtp+=~/.fzf
set splitbelow
set cursorline
set term=screen-256color
set hidden
set relativenumber

" gruvbox fzf color
let g:fzf_colors = {
      \ 'fg':      ['fg', 'GruvboxFg1'],
      \ 'bg':      ['fg', 'GruvboxBg0'],
      \ 'hl':      ['fg', 'GruvboxYellow'],
      \ 'fg+':     ['fg', 'GruvboxFg1'],
      \ 'bg+':     ['fg', 'GruvboxBg1'],
      \ 'hl+':     ['fg', 'GruvboxYellow'],
      \ 'info':    ['fg', 'GruvboxBlue'],
      \ 'prompt':  ['fg', 'GruvboxFg4'],
      \ 'pointer': ['fg', 'GruvboxBlue'],
      \ 'marker':  ['fg', 'GruvboxOrange'],
      \ 'spinner': ['fg', 'GruvboxYellow'],
      \ 'header':  ['fg', 'GruvboxBg3']
      \ }

" --- https://vim.fandom.com/wiki/Deleting_a_buffer_without_closing_the_window



" ---- Plugin Specific Configs --------------------------------------
"
" --- neoclide/coc.nvim
" use <tab> for trigger completion and navigate to the next complete item
function! s:check_back_space() abort
  let col = col('.') - 1
  return !col || getline('.')[col - 1]  =~ '\s'
endfunction

inoremap <silent><expr> <Tab>
      \ pumvisible() ? "\<C-n>" :
      \ <SID>check_back_space() ? "\<Tab>" :
      \ coc#refresh()

" autoformat during save
autocmd BufWritePre *.go :call CocAction('runCommand', 'editor.action.organizeImport')

" Use <cr> to confirm completion
inoremap <expr> <cr> pumvisible() ? "\<C-y>" : "\<C-g>u\<CR>"

" Remap keys for gotos
nmap <silent> gd <Plug>(coc-definition)
nmap <silent> gy <Plug>(coc-type-definition)
nmap <silent> gi <Plug>(coc-implementation)
nmap <silent> gr <Plug>(coc-references)

" use <c-space> to trigger completion
inoremap <silent><expr> <c-space> coc#refresh()

" Show all diagnostics
nnoremap <silent> <leader>ccd  :<c-u>CocList diagnostics<cr>

" --- scrooloose/nerdtree
" To have NERDTree always open on startup
" Then go to previous (last accessed) window.
autocmd vimenter * NERDTree
autocmd VimEnter * wincmd p
" Open nerdtree when opening directory
autocmd StdinReadPre * let s:std_in=1
autocmd VimEnter * if argc() == 1 && isdirectory(argv()[0]) && !exists("s:std_in") | exe 'NERDTree' argv()[0] | wincmd p | ene | exe 'cd '.argv()[0] | endif
" close vim if the only window left open is a NERDTree
autocmd bufenter * if (winnr("$") == 1 && exists("b:NERDTree") && b:NERDTree.isTabTree()) | q | endif

" --- junegunn/fzf.vim
let $FZF_DEFAULT_COMMAND = "ag --hidden --ignore .git -g ''"
nnoremap <c-p> :Files<CR>


" --- vim-airline/vim-airline
" Enable the list of buffers
let g:airline#extensions#tabline#enabled = 1

" Rogu
" make sure `:echo has('terminal')` returns 1
function! s:Rogu(args) abort
  execute ':terminal rogu' a:args
endfunction
com! -nargs=? Rogu :execute s:Rogu(<q-args>)
